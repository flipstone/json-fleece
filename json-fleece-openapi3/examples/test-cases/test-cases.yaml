openapi: 3.0.1
info:
  title: Fleece TestCases
  version: 1.0.0
paths:
  /test-cases/{param1}/multiple-path-params/{param2}:
    get:
      operationId: GetMultiplePathsParams
      parameters:
        - name: param1
          in: path
          required: true
          schema:
            type: string
        - name: param2
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/query-params:
    get:
      parameters:
        - name: string-param
          in: query
          required: true
          schema:
            type: string
        - name: boolean-param
          in: query
          required: true
          schema:
            type: boolean
        - name: required-array-param
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: optional-array-param
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: inline-enum-param
          required: false
          in: query
          schema:
            type: string
            enum:
              - baz
              - bat
              - bax
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/param-ref/{string-param}:
    get:
      operationId: ParamSchemaReference
      parameters:
        - name: string-param
          in: path
          schema:
            $ref: '#/components/schemas/string-param'
        - name: enum-param
          in: query
          schema:
            $ref: '#/components/schemas/enum-param'
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/param-ref-array:
    get:
      operationId: ParamSchemaReferenceArray
      parameters:
        - name: array-param
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/string-param'
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/request-body:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldTestCases'
      responses:
        '201':
          description: "Successful Post"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
components:
  schemas:
    string-param:
      type: string
    enum-param:
      type: string
      enum:
        - foo
        - bar
        - baz
    FieldTestCases:
      type: object
      description: A schema that contains test cases for each kind of field
      properties:
        requiredField:
          type: string
        optionalField:
          type: string
        optionalNullableField:
          type: string
          nullable: true
        requiredNullableField:
          type: string
          nullable: true
        arrayField:
          type: array
          items:
            type: string
        nullableArrayField:
          type: array
          nullable: true
          items:
            type: string
        optionalArrayField:
          type: array
          items:
            type: string
        optionalNullableArrayField:
          type: array
          nullable: true
          items:
            type: string
      required:
        - requiredField
        - requiredNullableField
        - arrayField
        - nullableArrayField

    TopLevelArray:
      type: array
      description: A schema that defines a top level array
      items:
        type: string

    TopLevelArrayNullable:
      type: array
      description: A schema that defines a top level array with nullable items
      items:
        type: string
        nullable: true

    NameConflicts:
      type: object
      properties:
        text:
          type: string
        scientific:
          type: number
        int32:
          type: integer
          format: int32
        int64:
          type: integer
          format: int64
        nameConflicts:
          type: string
        case:
          type: string
        class:
          type: string
        data:
          type: string
        deriving:
          type: string
        do:
          type: string
        else:
          type: string
        if:
          type: string
        import:
          type: string
        in:
          type: string
        infix:
          type: string
        infixl:
          type: string
        infixr:
          type: string
        instance:
          type: string
        let:
          type: string
        of:
          type: string
        module:
          type: string
        newtype:
          type: string
        then:
          type: string
        type:
          type: string
        where:
          type: string
