openapi: 3.0.1
info:
  title: Fleece TestCases
  version: 1.0.0
paths:
  /test-cases/{param1}/multiple-path-params/{param2}:
    get:
      operationId: GetMultiplePathsParams
      parameters:
        - name: param1
          in: path
          required: true
          schema:
            type: string
        - name: param2
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/query-params:
    get:
      parameters:
        - name: string-param
          in: query
          required: true
          schema:
            type: string
        - name: boolean-param
          in: query
          required: true
          schema:
            type: boolean
        - name: required-array-param
          in: query
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: optional-array-param
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: inline-enum-param
          required: false
          in: query
          schema:
            type: string
            enum:
              - baz
              - bat
              - bax
        - name: inline-enum-int-param
          required: false
          in: query
          schema:
            type: string
            enum:
              - "10"
              - "20"
              - "30"
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/header-params:
    get:
      parameters:
        - name: string-param
          in: header
          required: true
          schema:
            type: string
        - name: boolean-param
          in: header
          required: true
          schema:
            type: boolean
        - name: required-array-param
          in: header
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: optional-array-param
          in: header
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: inline-enum-param
          required: false
          in: header
          schema:
            type: string
            enum:
              - baz
              - bat
              - bax
        - name: inline-enum-int-param
          required: false
          in: header
          schema:
            type: string
            enum:
              - "10"
              - "20"
              - "30"
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/param-ref:
    get:
      parameters:
        - $ref: '#/components/parameters/AParam'
      responses:
        '204':
          description: Successfully got nothing
  /test-cases/param-ref/{string-param}:
    get:
      operationId: ParamSchemaReference
      parameters:
        - name: string-param
          in: path
          schema:
            $ref: '#/components/schemas/string-param'
        - name: enum-param
          in: query
          schema:
            $ref: '#/components/schemas/enum-param'
        - name: enum-int-param
          in: query
          schema:
            $ref: '#/components/schemas/enum-int-param'
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/param-ref-array:
    get:
      operationId: ParamSchemaReferenceArray
      parameters:
        - name: array-param
          in: query
          schema:
            type: array
            items:
              $ref: '#/components/schemas/string-param'
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/request-body:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldTestCases'
      responses:
        '201':
          description: "Successful Post"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldTestCases'
  /test-cases/inline-enum-array-request-body:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                enum:
                  - foo
                  - bar
                  - baz
      responses:
        '201':
          description: "Successful Post"
  /test-cases/inline-string-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: string
  /test-cases/inline-boolean-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: boolean
  /test-cases/inline-int32-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /test-cases/inline-int64-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /test-cases/inline-integer-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: integer
  /test-cases/inline-nullable-integer-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                nullable: true
                type: integer
  /test-cases/inline-nullable-integer-array-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  nullable: true
                  type: integer
                nullable: true
  /test-cases/inline-array-response:
    get:
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldTestCases'
  /test-cases/inline-object-json-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
  /test-cases/inline-object-string-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /test-cases/inline-object-string-ref-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/AStringType"
  /test-cases/inline-object-string-array-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /test-cases/inline-object-additional-properties-json-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /test-cases/inline-object-with-properties-json-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required:
                  - foo
                  - baz
                properties:
                  foo:
                    type: string
                  bar:
                    type: string
                  baz:
                    type: object
                    properties:
                      bax:
                        type: string
  /test-cases/inline-object-with-properties-and-additional-json-response:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: object
                required:
                  - foo
                  - baz
                properties:
                  foo:
                    type: string
                  bar:
                    type: string
                additionalProperties:
                  type: string
  /test-cases/inline-enum-responses:
    get:
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                type: string
                enum:
                  - foo
                  - bar
        '201':
          description: "OK"
          content:
            application/json:
              schema:
                type: string
                enum:
                  - baz
                  - bat
  /test-cases/no-content-response:
    get:
      responses:
        '201':
          description: "Successful Post"
  /test-cases/any-json-response:
    get:
      responses:
        '201':
          description: "Successful Post"
          content:
            application/json: {}
  /test-cases/multiple-responses-codes:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldTestCases'
      responses:
        '201':
          description: "Successful Post"
        '422':
          description: "Invalid Post"
  /test-cases/operation-type-options/{path-param}:
    get:
      parameters:
        - name: path-param
          in: path
          required: true
          schema:
            type: string
        - name: query-param
          in: query
          required: true
          schema:
            type: string
      responses:
        '201':
          description: "Successful Post"
        '422':
          description: "Invalid Post"
  /test-cases/op-with-number-prefixed-type:
    get:
      operationId: 2GetAResultNamedNumberSomething
      responses:
        '200':
          description: "Successful Get"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/2_SchemaStartingWithNumber'
components:
  parameters:
    AParam:
      in: header
      name: X-Sample-Header-Param
      schema:
        type: boolean
      required: true
  schemas:
    string-param:
      type: string
    enum-param:
      type: string
      enum:
        - foo
        - bar
        - baz
    enum-int-param:
      type: string
      enum:
        - "10"
        - "20"
        - "30"
    FieldTestCases:
      type: object
      description: A schema that contains test cases for each kind of field
      properties:
        requiredField:
          type: string
        optionalField:
          type: string
        optionalNullableField:
          type: string
          nullable: true
        requiredNullableField:
          type: string
          nullable: true
        arrayField:
          type: array
          items:
            type: string
        nullableArrayField:
          type: array
          nullable: true
          items:
            type: string
        optionalArrayField:
          type: array
          items:
            type: string
        optionalNullableArrayField:
          type: array
          nullable: true
          items:
            type: string
      required:
        - requiredField
        - requiredNullableField
        - arrayField
        - nullableArrayField

    ReferenceOneOfInsideOneOf:
      oneOf:
        - $ref: "#/components/schemas/ReferenceOneOf"
        - $ref: "#/components/schemas/TopLevelOneOfOneOption"
        - items:
            $ref: "#/components/schemas/TopLevelOneOfOneOption"
          type: array

    ReferenceOneOf:
      type: object
      properties:
        oneOfRef:
          $ref: "#/components/schemas/TopLevelOneOfOneOption"

    TopLevelOneOf:
      oneOf:
        - type: string
        - type: integer
        - items:
            type: string
          type: array
        - $ref: "#/components/schemas/AStringType"
        - $ref: "#/components/schemas/2_SchemaStartingWithNumber"
        - items:
            $ref: "#/components/schemas/FieldDescriptions"
          type: array
        - items:
            items:
              $ref: "#/components/schemas/MixedInJustAdditionalPropertiesSchemaInline"
            type: array
          type: array

    OneOfWithNullable:
      oneOf:
        - type: integer
        - type: string
          nullable: true
        - items:
            nullable: true
            type: string
          type: array
          nullable: true
        - items:
            $ref: "#/components/schemas/AStringType"
          type: array
        - items:
            $ref: "#/components/schemas/AStringType"
          type: array
          nullable: true
        - items:
            nullable: true
            items:
              $ref: "#/components/schemas/AStringType"
            type: array
          type: array

    TopLevelOneOfOneOption:
      oneOf:
        - type: string

    TopLevelArray:
      type: array
      description: A schema that defines a top level array
      items:
        type: string

    TopLevelArrayNullable:
      type: array
      description: A schema that defines a top level array with nullable items
      items:
        type: string
        nullable: true

    NameConflicts:
      type: object
      properties:
        text:
          type: string
        scientific:
          type: number
        int32:
          type: integer
          format: int32
        int64:
          type: integer
          format: int64
        nameConflicts:
          type: string
        case:
          type: string
        class:
          type: string
        data:
          type: string
        deriving:
          type: string
        do:
          type: string
        else:
          type: string
        if:
          type: string
        import:
          type: string
        in:
          type: string
        infix:
          type: string
        infixl:
          type: string
        infixr:
          type: string
        instance:
          type: string
        let:
          type: string
        of:
          type: string
        module:
          type: string
        newtype:
          type: string
        then:
          type: string
        type:
          type: string
        where:
          type: string

    CustomDateFormat:
      type: string
      format: date

    DateTimeFormats:
      type: object
      properties:
        defaultTimeField:
          type: string
          format: date-time
        utcTimeField:
          type: string
          format: date-time
        zonedTimeField:
          type: string
          format: date-time
        localTimeField:
          type: string
          format: date-time
        customUtcTimeField:
          type: string
          format: date-time
        customZonedTimeField:
          type: string
          format: date-time
        customLocalTimeField:
          type: string
          format: date-time

    DefaultTimeType:
      type: string
      format: date-time
    UtcTimeType:
      type: string
      format: date-time
    ZonedTimeType:
      type: string
      format: date-time
    LocalTimeType:
      type: string
      format: date-time

    DerivingNothing:
      description: A simple string type with options set in codegen.dhall to derive nothing
      type: string

    FieldDescriptions:
      type: object
      properties:
        noDescription:
          type: string
        withDescription:
          type: string
          description: This field has a description
        emptyDescription:
          type: string
          description: ""

    2_SchemaStartingWithNumber:
      type: string
      description: This Schema's name starts with a number and must be renamed for the generated code to be correct.

    JustAdditionalPropertiesTrue:
      type: object
      description: An object with just additionalProperties = true
      additionalProperties: true

    JustAdditionalPropertiesSchemaRef:
      type: object
      description: An object with just additionalProperties as a schema ref
      additionalProperties:
        $ref: '#/components/schemas/AStringType'

    JustAdditionalPropertiesSchemaInline:
      type: object
      description: An object with just additionalProperties as an inline schema
      additionalProperties:
        type: string

    MixedInAdditionalPropertiesTrue:
      type: object
      description: An object with additionalProperties = true mixed in with other properties
      properties:
        foo:
          type: string
        bar:
          type: string
      additionalProperties: true

    MixedInAdditionalPropertiesFalse:
      type: object
      description: An object with additionalProperties = false mixed in with other properties. This will produce an error if `strictAdditionalProperties` is set to `True`.
      properties:
        foo:
          type: string
        bar:
          type: string
      additionalProperties: false

    MixedInJustAdditionalPropertiesSchemaRef:
      type: object
      description: An object with additionalProperties as a schema ref mixed in with other properties
      properties:
        foo:
          type: string
        bar:
          type: string
      additionalProperties:
        $ref: '#/components/schemas/AStringType'

    MixedInJustAdditionalPropertiesSchemaInline:
      type: object
      description: An object with additionalProperties as an inline schema mixed in with other properties
      properties:
        foo:
          type: string
        bar:
          type: string
      additionalProperties:
        type: string

    AStringType:
      description: An explicit type that is just a string for use in other test cases
      type: string

    MinLengthOne:
      type: array
      items:
        type: boolean
      minLength: 1
